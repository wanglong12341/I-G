#!/usr/bin/env python# -*- coding: UTF-8 -*-import xlwtfrom selenium import webdriverfrom config.configer import Configfrom log.logger import Loggerimport pymysql,randomimport requests, os, redis, json, timeclass Common():	'''封装接口请求以及数据库数据获取'''	def __init__(self):		self.logger = Logger(logger="Common").getlog()	def Response(self, faceaddr, headers, product='czb_tp' , param=None):		"""post调用"""		if product == 'czb_tp':			url = Config().Get_Item("Testserver", "czb_url") + faceaddr			try:				print("请求地址:%s" % url)				print("请求参数头:%s" % headers)				print("请求参数:%s" % param)				self.logger.info("请求地址:%s" % url)				self.logger.info("请求参数头:%s" % headers)				self.logger.info("请求参数:%s" % param)				return requests.post(url, headers=headers, data=param)			except Exception as e:				return str(e)		elif product == '51':			url = Config().Get_Item("Testserver", "51_url") + faceaddr			try:				print("请求地址:%s" % url)				print("请求参数头:%s" % headers)				print("请求参数:%s" % param)				self.logger.info("请求地址:%s" % url)				self.logger.info("请求参数头:%s" % headers)				self.logger.info("请求参数:%s" % json.loads(param))				return requests.post(url, headers=headers, data=param)			except Exception as e:				return str(e)	def conn_sql(self,project,environment,select):		'''数据库连接'''		if project == 'czb':			if environment == 'dev1':				if select == 'apply':					host = Config().Get_Item('Database','dev1_host')					user = Config().Get_Item('Database','dev1_user')					pwd = Config().Get_Item('Database','dev1_password')					port = Config().Get_Item('Database','dev1_port')					db = Config().Get_Item('Database','dev1_user_db')					conn = pymysql.connect(host=host,user=user,possword=pwd,port=port,db=db)					cur = conn.cursor()					sql = cur.execute("select")	def get_sql_data(self,project,environment,*,table,factor):		'''查询库中数据'''	def get_json_data(self, filename):		"""获取json文件的数据"""		file = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + '/data/'		with open(file + filename, 'r') as f:			data = json.loads(f.read())		return data	def conn_redis(self):		"""连接redis"""		host = Config().Get_Item('Redis', 'host')		port = Config().Get_Item('Redis', 'port')		pwd = Config().Get_Item('Redis','password')		db = Config().Get_Item('Redis','db')		try:			pool = redis.ConnectionPool(host=host, port=port,password=pwd,db=db)			r = redis.Redis(connection_pool=pool)			self.logger.info("redis host:%s,port:%s,pwd=%s,db=%s" % (host, port,pwd,db))			return r		except Exception as e:			return str(e)	def create_borrowers(self):		"""爬取姓名身份证号"""		system = Config().Get_Item('Driver', 'system')		options = webdriver.FirefoxOptions()		options.set_headless(headless=True)		if system == 'mac':			driver = webdriver.Firefox(executable_path=os.path.dirname(				os.path.dirname(os.path.abspath(__file__))) + '/drivers/geckodriver_mac',firefox_options=options)		elif system == 'windows':			driver = webdriver.Firefox(executable_path=os.path.dirname(				os.path.dirname(os.path.abspath(__file__))) + '/drivers/geckodriver_windows.exe',firefox_options=options)		elif system == 'linux':			driver = webdriver.Firefox(executable_path=os.path.dirname(				os.path.dirname(os.path.abspath(__file__))) + '/drivers/geckodriver_linux',firefox_options=options)		else:			print("不支持该系统!")		driver.get("http://sfz.ckd.cc/idcard.php")		time.sleep(3)		driver.find_element_by_xpath("html/body/div[3]/div[3]/div[1]/div[2]/div[2]/p/a").click()		time.sleep(1)		realname = []		idcard = []		for i in range(2, 3):  # 32			strr = driver.find_element_by_xpath(				"html/body/div[3]/div[3]/div[1]/div[2]/div[2]/table/tbody/tr[" + str(i) + "]/td[1]").text.split(' ')			# strr = self.get_text(			# 	"xpath=>" + "html/body/div[3]/div[3]/div[1]/div[2]/div[2]/table/tbody/tr[" + str(i) + "]/td[1]").split(			# 	' ')			realname.append(strr[0])			idcard.append(strr[1])		driver.quit()		workbook = xlwt.Workbook(encoding='utf-8')		worksheet = workbook.add_sheet('borrowers', cell_overwrite_ok=False)		title = ['name', 'idcard']		for i in range(0, len(title)):			worksheet.write(0, i, title[i])		for i in range(0, len(realname)):			worksheet.write(i + 1, 0, realname[i])		for i in range(len(idcard)):			worksheet.write(i + 1, 1, idcard[i])		workbook.save(os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + '/data/borrowers.xls')		return "身份信息获取完成"	def get_random(self,type):		'''生成随机数的id'''		if type == "userid":			return str(random.randint(1,99999))		elif type == "transactionId":			return 'Test' + str(random.randint(1, 9999999))		elif type == "serviceSn":			return str(random.randint(1,9999999999))		elif type == 'phone':			ram = ''			for i in range(0,8):				ram += random.choice('0123456789')			return '155' + ram		elif type == 'sourceProjectId':			return str(random.randint(1, 999999))		elif type == 'requestNum':			reqn = ''			for i in range(0,32):				reqn += random.choice('0123456789')			return reqn		else:			return "不支持其它类型"	def get_time(self,type='-'):		'''获取格式化后的当前时间'''		if type == '-':			return time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())		elif type == 'null':			return time.strftime("%Y%m%d%H%M%S", time.localtime())		elif type == 'day':			return time.strftime("%Y-%m-%d", time.localtime())